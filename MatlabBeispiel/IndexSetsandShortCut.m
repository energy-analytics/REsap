%
clear setdiff;
clear union;
clear intersect;
setdiff=@(a,b)setdiff(a,b,'legacy');
union=@(a,b)union(a,b,'legacy');
intersect=@(a,b)intersect(a,b,'legacy');
% >> Compute index sets
isDispUnit=1:param.const.ndu;
isStateUnit=find([param.dispUnits.isStateUnit]);
isPriBalUnit=find([param.dispUnits.isPriBalUnit]);
isNoStateUnit=setdiff(isDispUnit, isStateUnit);
isSecBalUnit=find([param.dispUnits.isSecBalUnit]);
isStorage=find([param.dispUnits.isStorage]);
isDSS=find([param.dispUnits.isDSS]);
isCHP=find([param.dispUnits.isCHP]);
isV2G=find([param.dispUnits.isV2G]);
isSynchronizedUnit=find(~isnan([param.dispUnits.T_gen]));
isCurt=find([param.dispUnits.isCurt]);
isImport=setdiff(find([param.dispUnits.isImport]), find(isnan([param.dispUnits.isImport])));
isPowerUser=find([param.dispUnits.isPowerUser]);
isPowerProducer=find([param.dispUnits.isPowerProducer]);
isPowerUnit=union(isPowerUser,isPowerProducer);
isBTTP=find([param.dispUnits.isBTTP]);
isHeatUser=find([param.dispUnits.isHeatUser]);
isHeatProducer=find([param.dispUnits.isHeatProducer]);
isHeatUnit=union(isHeatUser,isHeatProducer);
isFixLoadCur=find([param.dispUnits.isFixLoadCur]);
isVarPowLim=find([param.dispUnits.isVarPowLim]);
isMustRun=find([param.dispUnits.isMustRun]);
% 
% >> Short cut notation for frequently used parmeters
nVarp=param.const.nvarp;                        
np=param.const.np;
nVar=param.const.nvar; 
nVarReal=param.const.nheat_p+param.const.nheat_u+param.const.nel_p+param.const.nel_u+param.const.npribalu+2*param.const.nsecbalu+2*param.const.ndss;
ndu=param.const.ndu;
nel_p=param.const.nel_p;
nel_u=param.const.nel_u;
nel=nel_p + nel_u;
nheat_p=param.const.nheat_p;
nheat_u=param.const.nheat_u;
nheat=nheat_p + nheat_u;
nstate=param.const.nstate;
nsites=max([param.dispUnits.site]);
if isnan(nsites); nsites=0;end;
nsu=param.const.nsu;
npribalu=param.const.npribalu;
nsecbalu=param.const.nsecbalu;
Q_0=[param.dispUnits.Q_0];
P_0=[param.dispUnits.P_0];
p_min=[param.dispUnits.p_min];
p_max=[param.dispUnits.p_max];
p_max_tp1=p_max;
p_grad_max=[param.dispUnits.p_grad_max];
eta=[param.dispUnits.eta];
k_add=[param.dispUnits.k_add];
e_start=[param.dispUnits.e_start_t];
e_max=[param.dispUnits.e_max];
e_min=[param.dispUnits.e_min];

% CHPindex=[param.dispUnits(isCHP).CHPindex];