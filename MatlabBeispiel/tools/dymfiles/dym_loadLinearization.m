function result = dym_loadLinearization(LTI,matfile)
% dym_loadLinearization - load linear system generated by Dymola from file in Matlab variable
%
% The linear system on file can be generated with dym_simulate
% or with option "-l" when calling the simulator executable on
% the DOS shell. It is described by
%
%      der(x) = A*x + B*u
%          y  = C*x + D*u
%
%   result = dym_loadLinearization(LTI)     ; loads linear system from mat-file 'dslin.mat' or
%                                             opens a pop-up dialog box if not present.
%   result = dym_loadLinearization(LTI,'*') ; opens a pop-up dialog box.
%   result = dym_loadLinearization(LTI,file); loads linear system from mat-file '<file>.mat'
%                                             and returns the system in an LTI object
%
%   LTI = 1: Return result as LTI object
%       = 0: Return result as struct
%            (this is useful if the Control System Toolbox is not available)
%            The struct has the following structure:
%               result.A
%               result.B
%               result.C
%               result.D
%               result.InputName    // cell array of strings
%               result.OutputName
%               result.StateName
%
%
% Changes:
%   K. Schnepper, DLR RM-ER 18. Nov. 2005:
%             Remove use of "lower" function for Windows (deprecated
%             use)
%
% Copyright (c) 1995-2006 by DLR and Dynasim AB.
% All rights reserved.
%

% it is expected that four matrices are on file:
%    Aclass (contains class-name), nx, xuyName, ABCD.

% determine file name
  result = [];
  useDialogBox = 0;
  if nargin < 1
     dym_error('No argument given. Use: dym_loadLinearization(1,''*'')');
  end

  if nargin == 1
     file = 'dslin.mat';
     if ~dym_existFile('dslin.mat')
        useDialogBox = 1;
     end
  end

  if useDialogBox | strcmp('*', matfile)
     [file, dirName] = uigetfile('*.mat', 'Open a Dymola linearization result file');
     if file==0
        result = [];
        return;
     end
     cd(dirName);
  else
     ii = findstr(matfile,'.');
     if isempty(ii)
        file = [matfile,'.mat'];
     else
        file = matfile;
     end

     if ~dym_existFile(file)
         dym_error( sprintf( ['"', file, '" does not exist in \n   %s'], pwd) );
     end
  end

% load data
  load(file);

% check whether file contains correct variable names
  if exist('Aclass') ~= 1
     dym_error( ['no linear system on file "' file '" (matrix "Aclass" is missing).'] )
  elseif exist('nx') ~= 1
     dym_error( ['no linear system on file "' file '" (matrix "nx" is missing).'] )
  elseif exist('xuyName') ~= 1
     dym_error( ['no linear system on file "' file '" (matrix "xuyName" is missing).'] )
  elseif exist('ABCD') ~= 1
     dym_error( ['no linear system on file "' file '" (matrix "ABCD" is missing).'] )
  end

% check whether file has correct class name
  classReq = 'AlinearSystem';
  ncol = min( size(classReq,2), size(Aclass,2) );
  nrow = size(Aclass,1);
  if nrow < 1 or (Aclass(1,1:ncol) ~= classReq(1,1:ncol))
     dym_error( [ 'file "' file '" is not of class ' classReq ] )
  end

% check whether matrices have compatible dimensions
  dimx        = nx(1);
  dimName     = size(xuyName,1);
  [dim1,dim2] = size(ABCD);
  if dimx > dim1 | dimx > dim2
     dym_error( ['nx > row/column number of matrix ABCD on file "' file '"'] )
  end
  dimu = dim2 - dimx;
  dimy = dim1 - dimx;
  dimc = size(xuyName,2);

% copy data in output arguments
  if dimx > 0
     A = ABCD(1:dimx,1:dimx);
     if dimu > 0
        B = ABCD(1:dimx,dimx+1:dim2);
     else
        B = [];
     end
     if dimy > 0
        C = ABCD(dimx+1:dim1,1:dimx);
     else
        C = [];
     end
  else
     A = [];
     B = [];
     C = [];
  end
  if dimu > 0  &  dimy > 0
     D = ABCD(dimx+1:dim1,dimx+1:dim2);
  else
     D = [];
  end

  if dimx > 0
     xName = cellstr( xuyName(1:dimx,1:dimc) );
  else
     xName = {};
  end

  if dimu > 0
     uName = cellstr( xuyName(dimx+1:dimx+dimu,1:dimc) );
  else
     uName = {};
  end

  if dimy > 0
     yName = cellstr( xuyName(dimx+dimu+1:dimx+dimu+dimy,1:dimc) );
  else
     yName ={};
  end

% Generate LTI object
  if LTI == 1
     result = ss(A,B,C,D, 'InputName', uName, 'OutputName', yName, 'StateName', xName);
  else
     result.A = A;
     result.B = B;
     result.C = C;
     result.D = D;
     result.InputName  = uName;
     result.OutputName = yName;
     result.StateName  = xName;
  end;

% print info message
  if file(1,1) == '/' | file(1,1) == '\' | file(1,2) == ':'
     dym_disp( [ '> ', file, ' loaded.' ] )
  else
     machine = computer;
     if machine(1,1:2) == 'PC'
        dym_disp( [ '> ', pwd, '\', file, ' loaded.' ] )
     else
        dym_disp( [ '> ', pwd, '/', file, ' loaded.' ] )
     end
  end
